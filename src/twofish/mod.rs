/*
* Module: twofish
* Autor: Piotr Pszczółkowski (piotr@beesoft.pl)
* Date: 5/05/2019
*
* Copyright (c) 2019, Piotr Pszczółkowski
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
* 1. Redistributions of source code must retain the above copyright notice, this
*    list of conditions and the following disclaimer.
*
* 2. Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#![allow(dead_code)]


const MDS_POLYNOMIAL: u32 = 0x169; // x^8 + x^6 + x^5 + x^3 + 1, see [TWOFISH] 4.2
const RS_POLYNOMIAL: u32  = 0x14d;  // x^8 + x^6 + x^3 + x^2 + 1, see [TWOFISH] 4.3

/// Stores 'x' as bytes in 'data' in little-endian form.
fn store32(data: &mut [u8], x: u32) {
	data[0] = x as u8;
	data[1] = x.wrapping_shr(8) as u8;
	data[2] = x.wrapping_shr(16) as u8;
	data[3] = x.wrapping_shr(24) as u8;
}

/// Reads a little-endian u32 from bytes in 'data'.
fn load32(data: &[u8]) -> u32 {
	let x0 = data[0] as u32;
	let x1 = (data[1] as u32).wrapping_shl(8);
	let x2 = (data[2] as u32).wrapping_shl(16);
	let x3 = (data[3] as u32).wrapping_shl(24);
	
	x0|x1|x2|x3
}

/// Returns 'x' after a left circular rotation of 'n' bits.
fn rol(x: u32, n: u32) -> u32 {
	let x0 = x.wrapping_shl(n & 31);
	let x1 = x.wrapping_shr(32 - (n & 31));
	
	x0|x1
}

/// Returns 'x' after a right circular rotation of 'n' bits.
fn ror(x: u32, n: u32) -> u32 {
	let x0 = x.wrapping_shr(n & 32);
	let x1 = x.wrapping_shl(32 - (n & 31));
	
	x0|x1
}

/// gf_mult returns a·b in GF(2^8)/p
fn gf_mult(mut a: u8, b: u8, p: u32) -> u8 {
	let mut b32 = [0u32, b as u32];
	let p32 = [0u32, p];
	let mut retv = 0u32;
	
	for _i in 0..7 {
		retv ^= b32[(a & 1) as usize];
		a = a.wrapping_shr(1);
		b32[1] = p32[b32[1].wrapping_shr(7) as usize] ^ b32[1].wrapping_shl(1);
	}
	 
	retv as u8
}

// mds_column_mult calculates y{col} where [y0 y1 y2 y3] = MDS · [x0]
#[allow(non_snake_case)]
fn mds_column_mult(i: u8, col: usize) -> u32 {
	let mul01 = i;
	let mul5B = gf_mult(i, 0x5B, MDS_POLYNOMIAL);
	let mulEF = gf_mult(i, 0xEF, MDS_POLYNOMIAL);
	
	match col {
		0 => {
			let x0 = mul01 as u32;
			let x1 = (mul5B as u32).wrapping_shl(8);
			let x2 = (mulEF as u32).wrapping_shl(16);
			let x3 = (mulEF as u32).wrapping_shl(24);
			x0|x1|x2|x3
		}
		1 => {
			let x0 = mulEF as u32;
			let x1 = (mulEF as u32).wrapping_shl(8);
			let x2 = (mul5B as u32).wrapping_shl(16);
			let x3 = (mul01 as u32).wrapping_shl(24);
			x0|x1|x2|x3			
		}
		2 => {
			let x0 = mul5B as u32;
			let x1 = (mulEF as u32).wrapping_shl(8);
			let x2 = (mul01 as u32).wrapping_shl(16);
			let x3 = (mulEF as u32).wrapping_shl(24);
			x0|x1|x2|x3
		}
		3 => {
			let x0 = mul5B as u32;
			let x1 = (mul01 as u32).wrapping_shl(8);
			let x2 = (mulEF as u32).wrapping_shl(16);
			let x3 = (mul5B as u32).wrapping_shl(24);
			x0|x1|x2|x3
		}
		_ => {
			panic!("unreachable");
		}
	}
}

// h implements the S-box generation function. See [TWOFISH] 4.3.5
fn h(i: &[u8], key: &[u8], offset: usize) -> u32 {
	let mut y = [i[0], i[1], i[2], i[3]];
	let mut n = key.len();
	
	if n == 4 {
		y[0] = SBOX[1][y[0] as usize] ^ key[4 * (6 + offset) + 0];
		y[1] = SBOX[0][y[1] as usize] ^ key[4 * (6 + offset) + 1];
		y[2] = SBOX[0][y[2] as usize] ^ key[4 * (6 + offset) + 2];
		y[3] = SBOX[1][y[3] as usize] ^ key[4 * (6 + offset) + 3];
		n -= 1;
	}
	if n == 3 {
		y[0] = SBOX[1][y[0] as usize] ^ key[4 * (4 + offset) +0];
		y[1] = SBOX[1][y[1] as usize] ^ key[4 * (4 + offset) +1];
		y[2] = SBOX[0][y[2] as usize] ^ key[4 * (4 + offset) +2];
		y[3] = SBOX[0][y[3] as usize] ^ key[4 * (4 + offset) +3];
		n -= 1;
	}
	if n == 2 {
		{
			let sv = SBOX[0][SBOX[0][y[0] as usize] as usize];
			let k0 = key[4 * (2 + offset) + 0];
			let k1 = key[4 * (0 + offset) + 0];
			y[0] = SBOX[1][(sv ^ k0 ^ k1) as usize];
		}
		{
			let sv = SBOX[0][SBOX[1][y[1] as usize] as usize];
			let k0 = key[4 * (2 + offset) + 1];
			let k1 = key[4 * (0 + offset) + 1];
			y[1] = SBOX[0][(sv ^ k0 ^ k1) as usize];
			
		}
		{
			let sv = SBOX[1][SBOX[0][y[2] as usize] as usize];
			let k0 = key[4 * (2 + offset) + 2];
			let k1 = key[4 * (0 + offset) + 2];
			y[2] = SBOX[1][(sv ^ k0 ^ k1) as usize];
		}
		{
			let sv = SBOX[1][SBOX[1][y[3] as usize] as usize];
			let k0 = key[4 * (2 + offset) + 3];
			let k1 = key[4 * (0 + offset) + 3];
			y[3] = SBOX[0][(sv ^ k0 ^ k1) as usize];
		}
	}
	
	let mut retv = 0u32;
	for i in 0..4 {
		retv ^= mds_column_mult(y[i], i);
	}
	retv
}



const RS: [[u8; 8]; 4] = [
	[0x01, 0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E],
	[0xA4, 0x56, 0x82, 0xF3, 0x1E, 0xC6, 0x68, 0xE5],
	[0x02, 0xA1, 0xFC, 0xC1, 0x47, 0xAE, 0x3D, 0x19],
	[0xA4, 0x55, 0x87, 0x5A, 0x58, 0xDB, 0x9E, 0x03],
];

const SBOX: [[u8; 256]; 2] = [
	[
		0xa9, 0x67, 0xb3, 0xe8, 0x04, 0xfd, 0xa3, 0x76, 0x9a, 0x92, 0x80, 0x78, 0xe4, 0xdd, 0xd1, 0x38,
		0x0d, 0xc6, 0x35, 0x98, 0x18, 0xf7, 0xec, 0x6c, 0x43, 0x75, 0x37, 0x26, 0xfa, 0x13, 0x94, 0x48,
		0xf2, 0xd0, 0x8b, 0x30, 0x84, 0x54, 0xdf, 0x23, 0x19, 0x5b, 0x3d, 0x59, 0xf3, 0xae, 0xa2, 0x82,
		0x63, 0x01, 0x83, 0x2e, 0xd9, 0x51, 0x9b, 0x7c, 0xa6, 0xeb, 0xa5, 0xbe, 0x16, 0x0c, 0xe3, 0x61,
		0xc0, 0x8c, 0x3a, 0xf5, 0x73, 0x2c, 0x25, 0x0b, 0xbb, 0x4e, 0x89, 0x6b, 0x53, 0x6a, 0xb4, 0xf1,
		0xe1, 0xe6, 0xbd, 0x45, 0xe2, 0xf4, 0xb6, 0x66, 0xcc, 0x95, 0x03, 0x56, 0xd4, 0x1c, 0x1e, 0xd7,
		0xfb, 0xc3, 0x8e, 0xb5, 0xe9, 0xcf, 0xbf, 0xba, 0xea, 0x77, 0x39, 0xaf, 0x33, 0xc9, 0x62, 0x71,
		0x81, 0x79, 0x09, 0xad, 0x24, 0xcd, 0xf9, 0xd8, 0xe5, 0xc5, 0xb9, 0x4d, 0x44, 0x08, 0x86, 0xe7,
		0xa1, 0x1d, 0xaa, 0xed, 0x06, 0x70, 0xb2, 0xd2, 0x41, 0x7b, 0xa0, 0x11, 0x31, 0xc2, 0x27, 0x90,
		0x20, 0xf6, 0x60, 0xff, 0x96, 0x5c, 0xb1, 0xab, 0x9e, 0x9c, 0x52, 0x1b, 0x5f, 0x93, 0x0a, 0xef,
		0x91, 0x85, 0x49, 0xee, 0x2d, 0x4f, 0x8f, 0x3b, 0x47, 0x87, 0x6d, 0x46, 0xd6, 0x3e, 0x69, 0x64,
		0x2a, 0xce, 0xcb, 0x2f, 0xfc, 0x97, 0x05, 0x7a, 0xac, 0x7f, 0xd5, 0x1a, 0x4b, 0x0e, 0xa7, 0x5a,
		0x28, 0x14, 0x3f, 0x29, 0x88, 0x3c, 0x4c, 0x02, 0xb8, 0xda, 0xb0, 0x17, 0x55, 0x1f, 0x8a, 0x7d,
		0x57, 0xc7, 0x8d, 0x74, 0xb7, 0xc4, 0x9f, 0x72, 0x7e, 0x15, 0x22, 0x12, 0x58, 0x07, 0x99, 0x34,
		0x6e, 0x50, 0xde, 0x68, 0x65, 0xbc, 0xdb, 0xf8, 0xc8, 0xa8, 0x2b, 0x40, 0xdc, 0xfe, 0x32, 0xa4,
		0xca, 0x10, 0x21, 0xf0, 0xd3, 0x5d, 0x0f, 0x00, 0x6f, 0x9d, 0x36, 0x42, 0x4a, 0x5e, 0xc1, 0xe0,
	],
	[
		0x75, 0xf3, 0xc6, 0xf4, 0xdb, 0x7b, 0xfb, 0xc8, 0x4a, 0xd3, 0xe6, 0x6b, 0x45, 0x7d, 0xe8, 0x4b,
		0xd6, 0x32, 0xd8, 0xfd, 0x37, 0x71, 0xf1, 0xe1, 0x30, 0x0f, 0xf8, 0x1b, 0x87, 0xfa, 0x06, 0x3f,
		0x5e, 0xba, 0xae, 0x5b, 0x8a, 0x00, 0xbc, 0x9d, 0x6d, 0xc1, 0xb1, 0x0e, 0x80, 0x5d, 0xd2, 0xd5,
		0xa0, 0x84, 0x07, 0x14, 0xb5, 0x90, 0x2c, 0xa3, 0xb2, 0x73, 0x4c, 0x54, 0x92, 0x74, 0x36, 0x51,
		0x38, 0xb0, 0xbd, 0x5a, 0xfc, 0x60, 0x62, 0x96, 0x6c, 0x42, 0xf7, 0x10, 0x7c, 0x28, 0x27, 0x8c,
		0x13, 0x95, 0x9c, 0xc7, 0x24, 0x46, 0x3b, 0x70, 0xca, 0xe3, 0x85, 0xcb, 0x11, 0xd0, 0x93, 0xb8,
		0xa6, 0x83, 0x20, 0xff, 0x9f, 0x77, 0xc3, 0xcc, 0x03, 0x6f, 0x08, 0xbf, 0x40, 0xe7, 0x2b, 0xe2,
		0x79, 0x0c, 0xaa, 0x82, 0x41, 0x3a, 0xea, 0xb9, 0xe4, 0x9a, 0xa4, 0x97, 0x7e, 0xda, 0x7a, 0x17,
		0x66, 0x94, 0xa1, 0x1d, 0x3d, 0xf0, 0xde, 0xb3, 0x0b, 0x72, 0xa7, 0x1c, 0xef, 0xd1, 0x53, 0x3e,
		0x8f, 0x33, 0x26, 0x5f, 0xec, 0x76, 0x2a, 0x49, 0x81, 0x88, 0xee, 0x21, 0xc4, 0x1a, 0xeb, 0xd9,
		0xc5, 0x39, 0x99, 0xcd, 0xad, 0x31, 0x8b, 0x01, 0x18, 0x23, 0xdd, 0x1f, 0x4e, 0x2d, 0xf9, 0x48,
		0x4f, 0xf2, 0x65, 0x8e, 0x78, 0x5c, 0x58, 0x19, 0x8d, 0xe5, 0x98, 0x57, 0x67, 0x7f, 0x05, 0x64,
		0xaf, 0x63, 0xb6, 0xfe, 0xf5, 0xb7, 0x3c, 0xa5, 0xce, 0xe9, 0x68, 0x44, 0xe0, 0x4d, 0x43, 0x69,
		0x29, 0x2e, 0xac, 0x15, 0x59, 0xa8, 0x0a, 0x9e, 0x6e, 0x47, 0xdf, 0x34, 0x35, 0x6a, 0xcf, 0xdc,
		0x22, 0xc9, 0xc0, 0x9b, 0x89, 0xd4, 0xed, 0xab, 0x12, 0xa2, 0x0d, 0x52, 0xbb, 0x02, 0x2f, 0xa9,
		0xd7, 0x61, 0x1e, 0xb4, 0x50, 0x04, 0xf6, 0xc2, 0x16, 0x25, 0x86, 0x56, 0x55, 0x09, 0xbe, 0x91,
	],
];
